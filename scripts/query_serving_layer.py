"""
Serving Layer - Requ√™tes combin√©es Batch + Speed
Combine les vues batch (Hive) et temps r√©el (Cassandra)
"""
import sys
from cassandra.cluster import Cluster
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def connect_cassandra(host='cassandra', port=9042):
    """Se connecte √† Cassandra"""
    try:
        cluster = Cluster([host], port=port)
        session = cluster.connect('realtime')
        logger.info("‚úì Connect√© √† Cassandra")
        return cluster, session
    except Exception as e:
        logger.error(f"‚ùå Erreur de connexion √† Cassandra: {e}")
        return None, None

def query_realtime_delays(session, origin=None, limit=10):
    """
    Query les retards temps r√©el depuis Cassandra
    
    Args:
        session: Session Cassandra
        origin: A√©roport d'origine (optionnel)
        limit: Nombre de r√©sultats
    """
    try:
        if origin:
            query = f"SELECT * FROM recent_delays WHERE origin = '{origin}'"
        else:
            query = f"SELECT * FROM recent_delays LIMIT {limit}"
        
        rows = session.execute(query)
        
        results = []
        for row in rows:
            results.append({
                'origin': row.origin,
                'recent_delay': row.recent_delay,
                'recent_dep_delay': row.recent_dep_delay
            })
        
        return results
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la requ√™te: {e}")
        return []

def display_results(results, title="R√©sultats"):
    """Affiche les r√©sultats de mani√®re format√©e"""
    logger.info(f"\n{'=' * 70}")
    logger.info(f"üìä {title}")
    logger.info('=' * 70)
    
    if not results:
        logger.info("Aucun r√©sultat trouv√©")
        return
    
    # Header
    logger.info(f"{'A√©roport':<15} {'Retard R√©cent (min)':<25} {'Retard D√©part (min)':<25}")
    logger.info('-' * 70)
    
    # Rows
    for r in results:
        origin = r['origin'] or 'N/A'
        recent_delay = f"{r['recent_delay']:.2f}" if r['recent_delay'] is not None else 'N/A'
        recent_dep_delay = f"{r['recent_dep_delay']:.2f}" if r['recent_dep_delay'] is not None else 'N/A'
        logger.info(f"{origin:<15} {recent_delay:<25} {recent_dep_delay:<25}")
    
    logger.info('=' * 70)

def main():
    """Fonction principale"""
    logger.info("=" * 70)
    logger.info("üîç Serving Layer - Requ√™tes Temps R√©el")
    logger.info("=" * 70)
    
    # Connexion √† Cassandra
    cluster, session = connect_cassandra()
    
    if session is None:
        logger.error("Impossible de se connecter √† Cassandra")
        sys.exit(1)
    
    # Exemple de requ√™tes
    try:
        # 1. Top 10 a√©roports avec retards r√©cents
        logger.info("\nüìå Top 10 a√©roports avec retards r√©cents:")
        results = query_realtime_delays(session, limit=10)
        display_results(results, "Top 10 A√©roports - Retards Temps R√©el")
        
        # 2. Requ√™te sp√©cifique (exemple: JFK)
        logger.info("\nüìå Requ√™te pour un a√©roport sp√©cifique (JFK):")
        results = query_realtime_delays(session, origin='JFK')
        display_results(results, "A√©roport JFK - Retards Temps R√©el")
        
        # Instructions pour combiner avec Hive
        logger.info("\n" + "=" * 70)
        logger.info("üìö Pour combiner avec les donn√©es batch (Hive):")
        logger.info("=" * 70)
        logger.info("1. Connectez-vous √† Hive:")
        logger.info("   docker exec -it hive beeline -u jdbc:hive2://localhost:10000")
        logger.info("\n2. Ex√©cutez la requ√™te:")
        logger.info("   USE batch_views;")
        logger.info("   SELECT * FROM airport_delay_stats WHERE origin = 'JFK';")
        logger.info("\n3. Comparez les r√©sultats batch (historique) vs temps r√©el!")
        logger.info("=" * 70)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
    finally:
        cluster.shutdown()
        logger.info("\n‚úì Connexion ferm√©e")

if __name__ == "__main__":
    main()
