# Script PowerShell pour lancer automatiquement le pipeline Big Data
# Usage: .\run_full_pipeline.ps1

Write-Host ""
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host "   üöÄ Pipeline Big Data - Architecture Lambda" -ForegroundColor Green
Write-Host "   üìä Pr√©diction des Retards de Vols" -ForegroundColor Green
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host ""

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-Not (Test-Path "docker-compose.yml")) {
    Write-Host "‚ùå Erreur: docker-compose.yml non trouv√©!" -ForegroundColor Red
    Write-Host "   Assurez-vous d'√™tre dans le r√©pertoire du projet" -ForegroundColor Yellow
    exit 1
}

# V√©rifier que Docker est install√©
try {
    docker --version | Out-Null
} catch {
    Write-Host "‚ùå Docker n'est pas install√© ou n'est pas accessible" -ForegroundColor Red
    exit 1
}

# Fonction pour afficher une √©tape
function Show-Step {
    param($number, $title)
    Write-Host ""
    Write-Host "[$number/6] $title" -ForegroundColor Yellow
    Write-Host "----------------------------------------------------------------" -ForegroundColor Gray
}

# Fonction pour attendre avec barre de progression
function Wait-WithProgress {
    param($seconds, $message)
    Write-Host "$message (${seconds}s)..." -ForegroundColor Cyan
    for ($i = 0; $i -lt $seconds; $i++) {
        Write-Progress -Activity $message -Status "Temps restant: $($seconds - $i) secondes" -PercentComplete (($i / $seconds) * 100)
        Start-Sleep -Seconds 1
    }
    Write-Progress -Activity $message -Completed
}

# √âtape 1: D√©marrer les conteneurs
Show-Step 1 "üì¶ D√©marrage des conteneurs Docker"
Write-Host "   Lancement de tous les services (Hadoop, Spark, Kafka, Cassandra, Hive)..." -ForegroundColor White
docker compose up -d
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erreur lors du d√©marrage des conteneurs" -ForegroundColor Red
    exit 1
}
Write-Host "‚úì Conteneurs d√©marr√©s" -ForegroundColor Green

# Attendre que les services soient pr√™ts
Wait-WithProgress 120 "‚è≥ Attente de l'initialisation des services"

# V√©rifier l'√©tat des conteneurs
Write-Host "`nüìã √âtat des conteneurs:" -ForegroundColor Cyan
docker compose ps

# √âtape 2: Installer les d√©pendances Python
Show-Step 2 "üì¶ Installation des d√©pendances Python"
Write-Host "   Installation de kafka-python, pandas, cassandra-driver..." -ForegroundColor White
docker exec python-env python /scripts/install_dependencies.py
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ö†Ô∏è  Avertissement: Erreur lors de l'installation des d√©pendances" -ForegroundColor Yellow
}
Write-Host "‚úì D√©pendances install√©es" -ForegroundColor Green

# √âtape 3: Initialiser HDFS
Show-Step 3 "üóÑÔ∏è  Initialisation de HDFS"
Write-Host "   Cr√©ation des r√©pertoires et chargement des donn√©es CSV..." -ForegroundColor White
docker exec hadoop-master bash /scripts/init_hdfs.sh
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ö†Ô∏è  Avertissement: Erreur lors de l'initialisation de HDFS" -ForegroundColor Yellow
}
Write-Host "‚úì HDFS initialis√©" -ForegroundColor Green

# √âtape 4: Initialiser Kafka
Show-Step 4 "üì° Initialisation de Kafka"
Write-Host "   Cr√©ation du topic 'live-flights'..." -ForegroundColor White
docker exec kafka bash /scripts/init_kafka.sh
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ö†Ô∏è  Avertissement: Erreur lors de l'initialisation de Kafka" -ForegroundColor Yellow
}
Write-Host "‚úì Kafka initialis√©" -ForegroundColor Green

# √âtape 5: Initialiser Cassandra
Show-Step 5 "üíæ Initialisation de Cassandra"
Write-Host "   Cr√©ation du keyspace 'realtime' et de la table 'recent_delays'..." -ForegroundColor White
Start-Sleep -Seconds 30  # Cassandra prend plus de temps √† d√©marrer
docker exec cassandra bash /scripts/init_cassandra.sh
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ö†Ô∏è  Avertissement: Erreur lors de l'initialisation de Cassandra" -ForegroundColor Yellow
}
Write-Host "‚úì Cassandra initialis√©" -ForegroundColor Green

# √âtape 6: Lancer le Batch Layer
Show-Step 6 "üìä Lancement du Batch Layer (Spark)"
Write-Host "   Traitement des donn√©es historiques et cr√©ation des vues batch..." -ForegroundColor White
Write-Host "   Cela peut prendre plusieurs minutes selon la taille du dataset..." -ForegroundColor Cyan
docker exec spark-master spark-submit --master spark://spark-master:7077 --deploy-mode client /scripts/batch_job.py
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ö†Ô∏è  Avertissement: Erreur lors de l'ex√©cution du batch job" -ForegroundColor Yellow
} else {
    Write-Host "‚úì Batch Layer termin√© avec succ√®s" -ForegroundColor Green
}

# R√©sum√©
Write-Host ""
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host "   ‚úÖ INITIALISATION TERMIN√âE!" -ForegroundColor Green
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìå Prochaines √©tapes:" -ForegroundColor Yellow
Write-Host ""
Write-Host "   1Ô∏è‚É£  Lancer le Speed Layer (Streaming):" -ForegroundColor White
Write-Host "       Terminal 1 - Spark Streaming (console mode):" -ForegroundColor Cyan
Write-Host '       docker exec -it spark-master spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.0,com.datastax.spark:spark-cassandra-connector_2.12:3.3.0 /scripts/streaming_job.py console' -ForegroundColor Gray
Write-Host ""
Write-Host "       Terminal 2 - Producteur Kafka:" -ForegroundColor Cyan
Write-Host '       docker exec -it python-env python /scripts/producer_flights.py' -ForegroundColor Gray
Write-Host ""
Write-Host "   2Ô∏è‚É£  V√©rifier les r√©sultats:" -ForegroundColor White
Write-Host "       ‚Ä¢ HDFS UI:     http://localhost:9870" -ForegroundColor Cyan
Write-Host "       ‚Ä¢ Spark UI:    http://localhost:8080" -ForegroundColor Cyan
Write-Host "       ‚Ä¢ Hive Query:  docker exec -it hive beeline -u jdbc:hive2://localhost:10000" -ForegroundColor Gray
Write-Host "       ‚Ä¢ Cassandra:   docker exec -it cassandra cqlsh" -ForegroundColor Gray
Write-Host ""
Write-Host "   3Ô∏è‚É£  Arr√™ter le pipeline:" -ForegroundColor White
Write-Host "       docker compose down" -ForegroundColor Gray
Write-Host ""
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host "   üìö Consultez README.md pour plus de d√©tails" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host ""
