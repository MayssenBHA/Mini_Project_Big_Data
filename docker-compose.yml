version: '3'
services:
  hadoop-master:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.1.1-java8
    container_name: hadoop-master
    ports:
      - "9870:9870"  # HDFS UI
      - "9000:9000"  # HDFS Port
    volumes:
      - ./data:/data  # Montez vos données locales
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=bigdata-cluster
      - CORE_CONF_fs_defaultFS=hdfs://hadoop-master:9000
    networks:
      - bigdata

  hadoop-datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.1.1-java8
    container_name: hadoop-datanode
    depends_on:
      - hadoop-master
    environment:
      - SERVICE_PRECONDITION=hadoop-master:9870
      - CORE_CONF_fs_defaultFS=hdfs://hadoop-master:9000
    volumes:
      - ./data:/data
      - hadoop_datanode:/hadoop/dfs/data
    networks:
      - bigdata

  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    ports:
      - "8080:8080"  # Spark UI
      - "7077:7077"  # Spark Master
    depends_on:
      - hadoop-master
    environment:
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - CORE_CONF_fs_defaultFS=hdfs://hadoop-master:9000
    volumes:
      - ./data:/data
      - ./scripts:/scripts  # Pour vos jobs Spark
    networks:
      - bigdata

  spark-worker:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
      - CORE_CONF_fs_defaultFS=hdfs://hadoop-master:9000
    volumes:
      - ./data:/data
      - ./scripts:/scripts
    networks:
      - bigdata

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - bigdata

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - bigdata

  cassandra:
    image: cassandra:4.0
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=bigdata-cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - bigdata

  hive:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive
    depends_on:
      - hadoop-master
    ports:
      - "10000:10000"  # HiveServer2
    environment:
      - SERVICE_PRECONDITION=hadoop-master:9870
      - CORE_CONF_fs_defaultFS=hdfs://hadoop-master:9000
    volumes:
      - ./configs/hive:/opt/hive/conf  # Configs personnalisées si besoin
    networks:
      - bigdata

  python-env:
    image: python:3.9
    container_name: python-env
    volumes:
      - ./data:/data
      - ./scripts:/scripts
    command: tail -f /dev/null  # Pour garder vivant pour exec
    networks:
      - bigdata

networks:
  bigdata:
    driver: bridge

volumes:
  hadoop_namenode:
  hadoop_datanode:
  cassandra_data: